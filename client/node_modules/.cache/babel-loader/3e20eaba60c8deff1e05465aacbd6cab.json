{"ast":null,"code":"var _jsxFileName = \"/home/aboardwithabag/Projects/consulting/src/TuiCalendar.js\";\n// To Do:\n// Create handlers for saving schedule events\n// Fetch events from MongoDB\n// Why multiple calendars?\n// Remove allday row?\nimport React from 'react';\nimport './TuiCalendar.css';\nimport Calendar from '@toast-ui/react-calendar';\nimport 'tui-calendar/dist/tui-calendar.css'; // If you use the default popups, use this.\n\nimport 'tui-date-picker/dist/tui-date-picker.css';\nimport 'tui-time-picker/dist/tui-time-picker.css';\nconst myTheme = {\n  // Theme object to extends default dark theme.\n  'common.border': '1px solid #e5e5e5',\n  'common.backgroundColor': 'white',\n  'common.holiday.color': '#ff4040',\n  'common.saturday.color': '#333',\n  'common.dayname.color': '#333',\n  'common.today.color': '#333',\n  // creation guide style\n  'common.creationGuide.backgroundColor': 'rgba(81, 92, 230, 0.05)',\n  'common.creationGuide.border': '1px solid #515ce6',\n  // month header 'dayname'\n  'month.dayname.height': '31px',\n  'month.dayname.borderLeft': '1px solid #e5e5e5',\n  'month.dayname.paddingLeft': '10px',\n  'month.dayname.paddingRight': '10px',\n  'month.dayname.backgroundColor': 'inherit',\n  'month.dayname.fontSize': '12px',\n  'month.dayname.fontWeight': 'normal',\n  'month.dayname.textAlign': 'left',\n  // month day grid cell 'day'\n  'month.holidayExceptThisMonth.color': 'rgba(255, 64, 64, 0.4)',\n  'month.dayExceptThisMonth.color': 'rgba(51, 51, 51, 0.4)',\n  'month.weekend.backgroundColor': 'inherit',\n  'month.day.fontSize': '14px',\n  // month schedule style\n  'month.schedule.borderRadius': '2px',\n  'month.schedule.height': '24px',\n  'month.schedule.marginTop': '2px',\n  'month.schedule.marginLeft': '8px',\n  'month.schedule.marginRight': '8px',\n  // month more view\n  'month.moreView.border': '1px solid #d5d5d5',\n  'month.moreView.boxShadow': '0 2px 6px 0 rgba(0, 0, 0, 0.1)',\n  'month.moreView.backgroundColor': 'white',\n  'month.moreView.paddingBottom': '17px',\n  'month.moreViewTitle.height': '44px',\n  'month.moreViewTitle.marginBottom': '12px',\n  'month.moreViewTitle.backgroundColor': 'inherit',\n  'month.moreViewTitle.borderBottom': 'none',\n  'month.moreViewTitle.padding': '12px 17px 0 17px',\n  'month.moreViewList.padding': '0 17px',\n  // week header 'dayname'\n  'week.dayname.height': '42px',\n  'week.dayname.borderTop': '1px solid #e5e5e5',\n  'week.dayname.borderBottom': '1px solid #e5e5e5',\n  'week.dayname.borderLeft': 'inherit',\n  'week.dayname.paddingLeft': '0',\n  'week.dayname.backgroundColor': 'inherit',\n  'week.dayname.textAlign': 'left',\n  'week.today.color': '#333',\n  'week.pastDay.color': '#bbb',\n  // week vertical panel 'vpanel'\n  'week.vpanelSplitter.border': '1px solid #e5e5e5',\n  'week.vpanelSplitter.height': '3px',\n  // week daygrid 'daygrid'\n  'week.daygrid.borderRight': '1px solid #e5e5e5',\n  'week.daygrid.backgroundColor': 'inherit',\n  'week.daygridLeft.width': '72px',\n  'week.daygridLeft.backgroundColor': 'inherit',\n  'week.daygridLeft.paddingRight': '8px',\n  'week.daygridLeft.borderRight': '1px solid #e5e5e5',\n  'week.today.backgroundColor': 'rgba(81, 92, 230, 0.05)',\n  'week.weekend.backgroundColor': 'inherit',\n  // week timegrid 'timegrid'\n  'week.timegridLeft.width': '72px',\n  'week.timegridLeft.backgroundColor': 'inherit',\n  'week.timegridLeft.borderRight': '1px solid #e5e5e5',\n  'week.timegridLeft.fontSize': '11px',\n  'week.timegridLeftTimezoneLabel.height': '40px',\n  'week.timegridLeftAdditionalTimezone.backgroundColor': 'white',\n  'week.timegridOneHour.height': '52px',\n  'week.timegridHalfHour.height': '26px',\n  'week.timegridHalfHour.borderBottom': 'none',\n  'week.timegridHorizontalLine.borderBottom': '1px solid #e5e5e5',\n  'week.timegrid.paddingRight': '8px',\n  'week.timegrid.borderRight': '1px solid #e5e5e5',\n  'week.timegridSchedule.borderRadius': '2px',\n  'week.timegridSchedule.paddingLeft': '2px',\n  'week.currentTime.color': '#515ce6',\n  'week.currentTime.fontSize': '11px',\n  'week.currentTime.fontWeight': 'normal',\n  'week.pastTime.color': '#bbb',\n  'week.pastTime.fontWeight': 'normal',\n  'week.futureTime.color': '#333',\n  'week.futureTime.fontWeight': 'normal',\n  'week.currentTimeLinePast.border': '1px dashed #515ce6',\n  'week.currentTimeLineBullet.backgroundColor': '#515ce6',\n  'week.currentTimeLineToday.border': '1px solid #515ce6',\n  'week.currentTimeLineFuture.border': 'none',\n  // week creation guide style\n  'week.creationGuide.color': '#515ce6',\n  'week.creationGuide.fontSize': '11px',\n  'week.creationGuide.fontWeight': 'bold',\n  // week daygrid schedule style\n  'week.dayGridSchedule.borderRadius': '2px',\n  'week.dayGridSchedule.height': '24px',\n  'week.dayGridSchedule.marginTop': '2px',\n  'week.dayGridSchedule.marginLeft': '8px',\n  'week.dayGridSchedule.marginRight': '8px'\n};\n\nconst TuiCalendar = () => /*#__PURE__*/React.createElement(Calendar, {\n  height: \"90vh\",\n  calendars: [{\n    id: '0',\n    name: 'Private',\n    bgColor: '#9e5fff',\n    borderColor: '#9e5fff'\n  }, {\n    id: '1',\n    name: 'Company',\n    bgColor: '#00a9ff',\n    borderColor: '#00a9ff'\n  }],\n  disableDblClick: true,\n  disableClick: false,\n  isReadOnly: false,\n  month: {\n    startDayOfWeek: 0\n  },\n  schedules: [],\n  scheduleView: true,\n  taskView: false,\n  template: {}\n  /* {{\n  milestone: function(schedule) {\n  return '<span class=\"calendar-font-icon ic-milestone-b\"></span> <span style=\"background-color: ' + schedule.bgColor + '\">' + schedule.title + '</span>';\n  },\n  milestoneTitle: function() {\n  return '<span class=\"tui-full-calendar-left-content\">MILESTONE</span>';\n  },\n  task: function(schedule) {\n  return '#' + schedule.title;\n  },\n  taskTitle: function() {\n  return '<span class=\"tui-full-calendar-left-content\">TASK</span>';\n  },\n  allday: function(schedule) {\n  return getTimeTemplate(schedule, true);\n  },\n  alldayTitle: function() {\n  return '<span class=\"tui-full-calendar-left-content\">ALL DAY</span>';\n  },\n  time: function(schedule) {\n  return '<strong>' + moment(schedule.start.getTime()).format('HH:mm') + '</strong> ' + schedule.title;\n  },\n  goingDuration: function(schedule) {\n  return '<span class=\"calendar-icon ic-travel-time\"></span>' + schedule.goingDuration + 'min.';\n  },\n  comingDuration: function(schedule) {\n  return '<span class=\"calendar-icon ic-travel-time\"></span>' + schedule.comingDuration + 'min.';\n  },\n  monthMoreTitleDate: function(date, dayname) {\n  var day = date.split('.')[2];\n  return '<span class=\"tui-full-calendar-month-more-title-day\">' + day + '</span> <span class=\"tui-full-calendar-month-more-title-day-label\">' + dayname + '</span>';\n  },\n  monthMoreClose: function() {\n  return '<span class=\"tui-full-calendar-icon tui-full-calendar-ic-close\"></span>';\n  },\n  monthGridHeader: function(dayModel) {\n  var date = parseInt(dayModel.date.split('-')[2], 10);\n  var classNames = ['tui-full-calendar-weekday-grid-date '];\n  if (dayModel.isToday) {\n  classNames.push('tui-full-calendar-weekday-grid-date-decorator');\n  }\n  return '<span class=\"' + classNames.join(' ') + '\">' + date + '</span>';\n  },\n  monthGridHeaderExceed: function(hiddenSchedules) {\n  return '<span class=\"weekday-grid-more-schedules\">+' + hiddenSchedules + '</span>';\n  },\n  monthGridFooter: function() {\n  return '';\n  },\n  monthGridFooterExceed: function(hiddenSchedules) {\n  return '';\n  },\n  monthDayname: function(model) {\n  return (model.label).toString().toLocaleUpperCase();\n  },\n  weekDayname: function(model) {\n  return '<span class=\"tui-full-calendar-dayname-date\">' + model.date + '</span>&nbsp;&nbsp;<span class=\"tui-full-calendar-dayname-name\">' + model.dayName + '</span>';\n  },\n  weekGridFooterExceed: function(hiddenSchedules) {\n  return '+' + hiddenSchedules;\n  },\n  dayGridTitle: function(viewName) {\n  // use another functions instead of 'dayGridTitle'\n  // milestoneTitle: function() {...}\n  // taskTitle: function() {...}\n  // alldayTitle: function() {...}\n  var title = '';\n  switch(viewName) {\n  case 'milestone':\n  title = '<span class=\"tui-full-calendar-left-content\">MILESTONE</span>';\n  break;\n  case 'task':\n  title = '<span class=\"tui-full-calendar-left-content\">TASK</span>';\n  break;\n  case 'allday':\n  title = '<span class=\"tui-full-calendar-left-content\">ALL DAY</span>';\n  break;\n  }\n  return title;\n  },\n  schedule: function(schedule) {\n  // use another functions instead of 'schedule'\n  // milestone: function() {...}\n  // task: function() {...}\n  // allday: function() {...}\n  var tpl;\n  switch(category) {\n  case 'milestone':\n  tpl = '<span class=\"calendar-font-icon ic-milestone-b\"></span> <span style=\"background-color: ' + schedule.bgColor + '\">' + schedule.title + '</span>';\n  break;\n  case 'task':\n  tpl = '#' + schedule.title;\n  break;\n  case 'allday':\n  tpl = getTimeTemplate(schedule, true);\n  break;\n  }\n  return tpl;\n  },\n  collapseBtnTitle: function() {\n  return '<span class=\"tui-full-calendar-icon tui-full-calendar-ic-arrow-solid-top\"></span>';\n  },\n  timezoneDisplayLabel: function(timezoneOffset, displayLabel) {\n  var gmt, hour, minutes;\n  if (!displayLabel) {\n  gmt = timezoneOffset < 0 ? '-' : '+';\n  hour = Math.abs(parseInt(timezoneOffset / 60, 10));\n  minutes = Math.abs(timezoneOffset % 60);\n  displayLabel = gmt + getPadStart(hour) + ':' + getPadStart(minutes);\n  }\n  return displayLabel;\n  },\n  timegridDisplayPrimayTime: function(time) {\n  // will be deprecated. use 'timegridDisplayPrimaryTime'\n  var meridiem = 'am';\n  var hour = time.hour;\n  if (time.hour > 12) {\n  meridiem = 'pm';\n  hour = time.hour - 12;\n  }\n  return hour + ' ' + meridiem;\n  },\n  timegridDisplayPrimaryTime: function(time) {\n  var meridiem = 'am';\n  var hour = time.hour;\n  if (time.hour > 12) {\n  meridiem = 'pm';\n  hour = time.hour - 12;\n  }\n  return hour + ' ' + meridiem;\n  },\n  timegridDisplayTime: function(time) {\n  return getPadStart(time.hour) + ':' + getPadStart(time.hour);\n  },\n  timegridCurrentTime: function(timezone) {\n  var templates = [];\n  if (timezone.dateDifference) {\n  templates.push('[' + timezone.dateDifferenceSign + timezone.dateDifference + ']<br>');\n  }\n  templates.push(moment(timezone.hourmarker).format('HH:mm a'));\n  return templates.join('');\n  },\n  popupIsAllDay: function() {\n  return 'All Day';\n  },\n  popupStateFree: function() {\n  return 'Free';\n  },\n  popupStateBusy: function() {\n  return 'Busy';\n  },\n  titlePlaceholder: function() {\n  return 'Subject';\n  },\n  locationPlaceholder: function() {\n  return 'Location';\n  },\n  startDatePlaceholder: function() {\n  return 'Start date';\n  },\n  endDatePlaceholder: function() {\n  return 'End date';\n  },\n  popupSave: function() {\n  return 'Save';\n  },\n  popupUpdate: function() {\n  return 'Update';\n  },\n  popupDetailDate: function(isAllDay, start, end) {\n  var isSameDate = moment(start).isSame(end);\n  var endFormat = (isSameDate ? '' : 'YYYY.MM.DD ') + 'hh:mm a';\n  if (isAllDay) {\n  return moment(start).format('YYYY.MM.DD') + (isSameDate ? '' : ' - ' + moment(end).format('YYYY.MM.DD'));\n  }\n  return (moment(start).format('YYYY.MM.DD hh:mm a') + ' - ' + moment(end).format(endFormat));\n  },\n  popupDetailLocation: function(schedule) {\n  return 'Location : ' + schedule.location;\n  },\n  popupDetailUser: function(schedule) {\n  return 'User : ' + (schedule.attendees || []).join(', ');\n  },\n  popupDetailState: function(schedule) {\n  return 'State : ' + schedule.state || 'Busy';\n  },\n  popupDetailRepeat: function(schedule) {\n  return 'Repeat : ' + schedule.recurrenceRule;\n  },\n  popupDetailBody: function(schedule) {\n  return 'Body : ' + schedule.body;\n  },\n  popupEdit: function() {\n  return 'Edit';\n  },\n  popupDelete: function() {\n  return 'Delete';\n  }\n  }\n  }\n  */\n  ,\n  theme: myTheme,\n  timezones: [{\n    timezoneOffset: 300,\n    displayLabel: 'Eastern Time',\n    tooltip: 'New York'\n  }, {\n    timezoneOffset: -420,\n    displayLabel: 'GMT-08:00',\n    tooltip: 'Los Angeles'\n  }],\n  useDetailPopup: true,\n  useCreationPopup: true // view={selectedView} // You can also set the `defaultView` option.\n  ,\n  week: {\n    showTimezoneCollapseButton: false,\n    timezonesCollapsed: true\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 3\n  }\n});\n\nexport default TuiCalendar;","map":{"version":3,"sources":["/home/aboardwithabag/Projects/consulting/src/TuiCalendar.js"],"names":["React","Calendar","myTheme","TuiCalendar","id","name","bgColor","borderColor","startDayOfWeek","timezoneOffset","displayLabel","tooltip","showTimezoneCollapseButton","timezonesCollapsed"],"mappings":"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","sourcesContent":["// To Do:\n// Create handlers for saving schedule events\n// Fetch events from MongoDB\n// Why multiple calendars?\n// Remove allday row?\n\n\nimport React from 'react';\nimport './TuiCalendar.css';\n\nimport Calendar from '@toast-ui/react-calendar';\nimport 'tui-calendar/dist/tui-calendar.css';\n\n// If you use the default popups, use this.\nimport 'tui-date-picker/dist/tui-date-picker.css';\nimport 'tui-time-picker/dist/tui-time-picker.css';\n\nconst myTheme = {\n  // Theme object to extends default dark theme.\n  'common.border': '1px solid #e5e5e5',\n  'common.backgroundColor': 'white',\n  'common.holiday.color': '#ff4040',\n  'common.saturday.color': '#333',\n  'common.dayname.color': '#333',\n  'common.today.color': '#333',\n\n  // creation guide style\n  'common.creationGuide.backgroundColor': 'rgba(81, 92, 230, 0.05)',\n  'common.creationGuide.border': '1px solid #515ce6',\n\n  // month header 'dayname'\n  'month.dayname.height': '31px',\n  'month.dayname.borderLeft': '1px solid #e5e5e5',\n  'month.dayname.paddingLeft': '10px',\n  'month.dayname.paddingRight': '10px',\n  'month.dayname.backgroundColor': 'inherit',\n  'month.dayname.fontSize': '12px',\n  'month.dayname.fontWeight': 'normal',\n  'month.dayname.textAlign': 'left',\n\n  // month day grid cell 'day'\n  'month.holidayExceptThisMonth.color': 'rgba(255, 64, 64, 0.4)',\n  'month.dayExceptThisMonth.color': 'rgba(51, 51, 51, 0.4)',\n  'month.weekend.backgroundColor': 'inherit',\n  'month.day.fontSize': '14px',\n\n  // month schedule style\n  'month.schedule.borderRadius': '2px',\n  'month.schedule.height': '24px',\n  'month.schedule.marginTop': '2px',\n  'month.schedule.marginLeft': '8px',\n  'month.schedule.marginRight': '8px',\n\n  // month more view\n  'month.moreView.border': '1px solid #d5d5d5',\n  'month.moreView.boxShadow': '0 2px 6px 0 rgba(0, 0, 0, 0.1)',\n  'month.moreView.backgroundColor': 'white',\n  'month.moreView.paddingBottom': '17px',\n  'month.moreViewTitle.height': '44px',\n  'month.moreViewTitle.marginBottom': '12px',\n  'month.moreViewTitle.backgroundColor': 'inherit',\n  'month.moreViewTitle.borderBottom': 'none',\n  'month.moreViewTitle.padding': '12px 17px 0 17px',\n  'month.moreViewList.padding': '0 17px',\n\n  // week header 'dayname'\n  'week.dayname.height': '42px',\n  'week.dayname.borderTop': '1px solid #e5e5e5',\n  'week.dayname.borderBottom': '1px solid #e5e5e5',\n  'week.dayname.borderLeft': 'inherit',\n  'week.dayname.paddingLeft': '0',\n  'week.dayname.backgroundColor': 'inherit',\n  'week.dayname.textAlign': 'left',\n  'week.today.color': '#333',\n  'week.pastDay.color': '#bbb',\n\n  // week vertical panel 'vpanel'\n  'week.vpanelSplitter.border': '1px solid #e5e5e5',\n  'week.vpanelSplitter.height': '3px',\n\n  // week daygrid 'daygrid'\n  'week.daygrid.borderRight': '1px solid #e5e5e5',\n  'week.daygrid.backgroundColor': 'inherit',\n\n  'week.daygridLeft.width': '72px',\n  'week.daygridLeft.backgroundColor': 'inherit',\n  'week.daygridLeft.paddingRight': '8px',\n  'week.daygridLeft.borderRight': '1px solid #e5e5e5',\n\n  'week.today.backgroundColor': 'rgba(81, 92, 230, 0.05)',\n  'week.weekend.backgroundColor': 'inherit',\n\n  // week timegrid 'timegrid'\n  'week.timegridLeft.width': '72px',\n  'week.timegridLeft.backgroundColor': 'inherit',\n  'week.timegridLeft.borderRight': '1px solid #e5e5e5',\n  'week.timegridLeft.fontSize': '11px',\n  'week.timegridLeftTimezoneLabel.height': '40px',\n  'week.timegridLeftAdditionalTimezone.backgroundColor': 'white',\n\n  'week.timegridOneHour.height': '52px',\n  'week.timegridHalfHour.height': '26px',\n  'week.timegridHalfHour.borderBottom': 'none',\n  'week.timegridHorizontalLine.borderBottom': '1px solid #e5e5e5',\n\n  'week.timegrid.paddingRight': '8px',\n  'week.timegrid.borderRight': '1px solid #e5e5e5',\n  'week.timegridSchedule.borderRadius': '2px',\n  'week.timegridSchedule.paddingLeft': '2px',\n\n  'week.currentTime.color': '#515ce6',\n  'week.currentTime.fontSize': '11px',\n  'week.currentTime.fontWeight': 'normal',\n\n  'week.pastTime.color': '#bbb',\n  'week.pastTime.fontWeight': 'normal',\n\n  'week.futureTime.color': '#333',\n  'week.futureTime.fontWeight': 'normal',\n\n  'week.currentTimeLinePast.border': '1px dashed #515ce6',\n  'week.currentTimeLineBullet.backgroundColor': '#515ce6',\n  'week.currentTimeLineToday.border': '1px solid #515ce6',\n  'week.currentTimeLineFuture.border': 'none',\n\n  // week creation guide style\n  'week.creationGuide.color': '#515ce6',\n  'week.creationGuide.fontSize': '11px',\n  'week.creationGuide.fontWeight': 'bold',\n\n  // week daygrid schedule style\n  'week.dayGridSchedule.borderRadius': '2px',\n  'week.dayGridSchedule.height': '24px',\n  'week.dayGridSchedule.marginTop': '2px',\n  'week.dayGridSchedule.marginLeft': '8px',\n  'week.dayGridSchedule.marginRight': '8px'\n};\n\nconst TuiCalendar = () => (\n  <Calendar\n    height=\"90vh\"\n    calendars={[\n      {\n        id: '0',\n        name: 'Private',\n        bgColor: '#9e5fff',\n        borderColor: '#9e5fff'\n      },\n      {\n        id: '1',\n        name: 'Company',\n        bgColor: '#00a9ff',\n        borderColor: '#00a9ff'\n      }\n    ]}\n    disableDblClick={true}\n    disableClick={false}\n    isReadOnly={false}\n    month={{\n      startDayOfWeek: 0\n    }}\n    schedules={[]}\n    scheduleView\n    taskView={false}\n    template={{}}    /* {{\n        milestone: function(schedule) {\n            return '<span class=\"calendar-font-icon ic-milestone-b\"></span> <span style=\"background-color: ' + schedule.bgColor + '\">' + schedule.title + '</span>';\n        },\n        milestoneTitle: function() {\n            return '<span class=\"tui-full-calendar-left-content\">MILESTONE</span>';\n        },\n        task: function(schedule) {\n            return '#' + schedule.title;\n        },\n        taskTitle: function() {\n            return '<span class=\"tui-full-calendar-left-content\">TASK</span>';\n        },\n        allday: function(schedule) {\n            return getTimeTemplate(schedule, true);\n        },\n        alldayTitle: function() {\n            return '<span class=\"tui-full-calendar-left-content\">ALL DAY</span>';\n        },\n        time: function(schedule) {\n            return '<strong>' + moment(schedule.start.getTime()).format('HH:mm') + '</strong> ' + schedule.title;\n        },\n        goingDuration: function(schedule) {\n            return '<span class=\"calendar-icon ic-travel-time\"></span>' + schedule.goingDuration + 'min.';\n        },\n        comingDuration: function(schedule) {\n            return '<span class=\"calendar-icon ic-travel-time\"></span>' + schedule.comingDuration + 'min.';\n        },\n        monthMoreTitleDate: function(date, dayname) {\n            var day = date.split('.')[2];\n\n            return '<span class=\"tui-full-calendar-month-more-title-day\">' + day + '</span> <span class=\"tui-full-calendar-month-more-title-day-label\">' + dayname + '</span>';\n        },\n        monthMoreClose: function() {\n            return '<span class=\"tui-full-calendar-icon tui-full-calendar-ic-close\"></span>';\n        },\n        monthGridHeader: function(dayModel) {\n            var date = parseInt(dayModel.date.split('-')[2], 10);\n            var classNames = ['tui-full-calendar-weekday-grid-date '];\n\n            if (dayModel.isToday) {\n                classNames.push('tui-full-calendar-weekday-grid-date-decorator');\n            }\n\n            return '<span class=\"' + classNames.join(' ') + '\">' + date + '</span>';\n        },\n        monthGridHeaderExceed: function(hiddenSchedules) {\n            return '<span class=\"weekday-grid-more-schedules\">+' + hiddenSchedules + '</span>';\n        },\n        monthGridFooter: function() {\n            return '';\n        },\n        monthGridFooterExceed: function(hiddenSchedules) {\n            return '';\n        },\n        monthDayname: function(model) {\n            return (model.label).toString().toLocaleUpperCase();\n        },\n        weekDayname: function(model) {\n            return '<span class=\"tui-full-calendar-dayname-date\">' + model.date + '</span>&nbsp;&nbsp;<span class=\"tui-full-calendar-dayname-name\">' + model.dayName + '</span>';\n        },\n        weekGridFooterExceed: function(hiddenSchedules) {\n            return '+' + hiddenSchedules;\n        },\n        dayGridTitle: function(viewName) {\n\n            // use another functions instead of 'dayGridTitle'\n            // milestoneTitle: function() {...}\n            // taskTitle: function() {...}\n            // alldayTitle: function() {...}\n\n            var title = '';\n            switch(viewName) {\n                case 'milestone':\n                    title = '<span class=\"tui-full-calendar-left-content\">MILESTONE</span>';\n                    break;\n                case 'task':\n                    title = '<span class=\"tui-full-calendar-left-content\">TASK</span>';\n                    break;\n                case 'allday':\n                    title = '<span class=\"tui-full-calendar-left-content\">ALL DAY</span>';\n                    break;\n            }\n\n            return title;\n        },\n        schedule: function(schedule) {\n\n            // use another functions instead of 'schedule'\n            // milestone: function() {...}\n            // task: function() {...}\n            // allday: function() {...}\n\n            var tpl;\n\n            switch(category) {\n                case 'milestone':\n                    tpl = '<span class=\"calendar-font-icon ic-milestone-b\"></span> <span style=\"background-color: ' + schedule.bgColor + '\">' + schedule.title + '</span>';\n                    break;\n                case 'task':\n                    tpl = '#' + schedule.title;\n                    break;\n                case 'allday':\n                    tpl = getTimeTemplate(schedule, true);\n                    break;\n            }\n\n            return tpl;\n        },\n        collapseBtnTitle: function() {\n            return '<span class=\"tui-full-calendar-icon tui-full-calendar-ic-arrow-solid-top\"></span>';\n        },\n        timezoneDisplayLabel: function(timezoneOffset, displayLabel) {\n            var gmt, hour, minutes;\n\n            if (!displayLabel) {\n                gmt = timezoneOffset < 0 ? '-' : '+';\n                hour = Math.abs(parseInt(timezoneOffset / 60, 10));\n                minutes = Math.abs(timezoneOffset % 60);\n                displayLabel = gmt + getPadStart(hour) + ':' + getPadStart(minutes);\n            }\n\n            return displayLabel;\n        },\n        timegridDisplayPrimayTime: function(time) {\n            // will be deprecated. use 'timegridDisplayPrimaryTime'\n            var meridiem = 'am';\n            var hour = time.hour;\n\n            if (time.hour > 12) {\n                meridiem = 'pm';\n                hour = time.hour - 12;\n            }\n\n            return hour + ' ' + meridiem;\n        },\n        timegridDisplayPrimaryTime: function(time) {\n            var meridiem = 'am';\n            var hour = time.hour;\n\n            if (time.hour > 12) {\n                meridiem = 'pm';\n                hour = time.hour - 12;\n            }\n\n            return hour + ' ' + meridiem;\n        },\n        timegridDisplayTime: function(time) {\n            return getPadStart(time.hour) + ':' + getPadStart(time.hour);\n        },\n        timegridCurrentTime: function(timezone) {\n            var templates = [];\n\n            if (timezone.dateDifference) {\n                templates.push('[' + timezone.dateDifferenceSign + timezone.dateDifference + ']<br>');\n            }\n\n            templates.push(moment(timezone.hourmarker).format('HH:mm a'));\n\n            return templates.join('');\n        },\n        popupIsAllDay: function() {\n            return 'All Day';\n        },\n        popupStateFree: function() {\n            return 'Free';\n        },\n        popupStateBusy: function() {\n            return 'Busy';\n        },\n        titlePlaceholder: function() {\n            return 'Subject';\n        },\n        locationPlaceholder: function() {\n            return 'Location';\n        },\n        startDatePlaceholder: function() {\n            return 'Start date';\n        },\n        endDatePlaceholder: function() {\n            return 'End date';\n        },\n        popupSave: function() {\n            return 'Save';\n        },\n        popupUpdate: function() {\n            return 'Update';\n        },\n        popupDetailDate: function(isAllDay, start, end) {\n            var isSameDate = moment(start).isSame(end);\n            var endFormat = (isSameDate ? '' : 'YYYY.MM.DD ') + 'hh:mm a';\n\n            if (isAllDay) {\n                return moment(start).format('YYYY.MM.DD') + (isSameDate ? '' : ' - ' + moment(end).format('YYYY.MM.DD'));\n            }\n\n            return (moment(start).format('YYYY.MM.DD hh:mm a') + ' - ' + moment(end).format(endFormat));\n        },\n        popupDetailLocation: function(schedule) {\n            return 'Location : ' + schedule.location;\n        },\n        popupDetailUser: function(schedule) {\n            return 'User : ' + (schedule.attendees || []).join(', ');\n        },\n        popupDetailState: function(schedule) {\n            return 'State : ' + schedule.state || 'Busy';\n        },\n        popupDetailRepeat: function(schedule) {\n            return 'Repeat : ' + schedule.recurrenceRule;\n        },\n        popupDetailBody: function(schedule) {\n            return 'Body : ' + schedule.body;\n        },\n        popupEdit: function() {\n            return 'Edit';\n        },\n        popupDelete: function() {\n            return 'Delete';\n        }\n      }\n    }\n    */\n    theme={myTheme}\n    timezones={[\n      {\n        timezoneOffset: 300,\n        displayLabel: 'Eastern Time',\n        tooltip: 'New York'\n      },\n      {\n        timezoneOffset: -420,\n        displayLabel: 'GMT-08:00',\n        tooltip: 'Los Angeles'\n      }\n    ]}\n    useDetailPopup\n    useCreationPopup\n    // view={selectedView} // You can also set the `defaultView` option.\n    week={{\n      showTimezoneCollapseButton: false,\n      timezonesCollapsed: true\n    }}\n  />\n);\n\nexport default TuiCalendar;\n"]},"metadata":{},"sourceType":"module"}